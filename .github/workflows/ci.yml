# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      # --- REPLACE START: Add environment validation step
      - name: Validate environment variables
        run: node scripts/validate-env.js
        env:
          MONGO_URI:        ${{ secrets.MONGO_URI }}
          JWT_SECRET:       ${{ secrets.JWT_SECRET }}
          STRIPE_SECRET_KEY:       ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET:   ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          STRIPE_PREMIUM_PRICE_ID: ${{ secrets.STRIPE_PREMIUM_PRICE_ID }}
          PAYPAL_CLIENT_ID:        ${{ secrets.PAYPAL_CLIENT_ID }}
          PAYPAL_SECRET:           ${{ secrets.PAYPAL_SECRET }}
          PAYPAL_PREMIUM_PRICE:    ${{ secrets.PAYPAL_PREMIUM_PRICE }}
          PAYPAL_WEBHOOK_ID:       ${{ secrets.PAYPAL_WEBHOOK_ID }}
          CLIENT_URL:              ${{ secrets.CLIENT_URL }}
      # --- REPLACE END

  server-tests:
    needs: setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Run Jest tests
        run: npm test -- --coverage

      # --- REPLACE START: Enforce server coverage threshold
      - name: Enforce server coverage threshold
        run: |
          npx jest --coverage --coverageThreshold='{"global":{"branches":80,"functions":80,"lines":80,"statements":80}}'
      # --- REPLACE END

      - name: Upload coverage report
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: server-coverage
          path: coverage

  client-tests:
    needs: setup
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm install

      - name: Run React Testing Library tests
        run: npm test -- --coverage

      # --- REPLACE START: Enforce client coverage threshold
      - name: Enforce client coverage threshold
        run: npm test -- --coverage --coverageThreshold='{"global":{"branches":80,"functions":80,"lines":80,"statements":80}}'
      # --- REPLACE END

      - name: Upload coverage report
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: client-coverage
          path: coverage

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install ESLint
        run: |
          cd server && npm install eslint
          cd ../client && npm install eslint

      - name: Run ESLint on server
        run: cd server && npm run lint

      - name: Run ESLint on client
        run: cd client && npm run lint

  build-and-audit:
    needs: [server-tests, client-tests, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Docker images (no-cache)
        run: docker-compose -f docker-compose.yml -f docker-compose.override.yml build --no-cache

      - name: npm audit (high severity)
        run: npm audit --audit-level=high

  terraform:
    needs: build-and-audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # --- REPLACE START: Terraform checks and plan
      - name: Terraform Init & Format Check
        working-directory: ./terraform
        run: |
          terraform init -backend=false
          terraform fmt -check
          terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -no-color
      # --- REPLACE END
