# File: .github/workflows/client-deploy.yml

# --- REPLACE START: unify workflow, add least-privilege permissions, expose test env vars, keep behavior intact ---
name: Client Deploy

on:
  push:
    branches:
      - develop
      - main
  # Manual trigger is handy during setup/debug
  workflow_dispatch:

# GitHub token scope for this workflow.
# Keep read access for repo contents and allow OIDC (id-token) for a future AWS migration.
permissions:
  id-token: write
  contents: read

# Test credentials used by client tests/e2e/perf (read from GitHub Secrets ONLY).
# NOTE: These are available to all jobs/steps below; do not echo them.
env:
  TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
  PERF_PASSWORD: ${{ secrets.PERF_PASSWORD }}
  CYPRESS_TEST_PASSWORD: ${{ secrets.CYPRESS_TEST_PASSWORD }}

jobs:
  build-deploy:
    name: Build client, deploy to S3, invalidate CloudFront
    runs-on: ubuntu-latest
    # Use the GitHub Environment "staging" so this job gets environment-scoped secrets.
    environment: staging

    # Default working directory for all "run:" steps to keep file paths short/consistent.
    defaults:
      run:
        working-directory: client

    # Keep an explicit region; allow repository variable override.
    env:
      # Prefer repository variable if set; otherwise fall back to this default.
      AWS_REGION: ${{ vars.AWS_REGION != '' && vars.AWS_REGION || 'eu-north-1' }}

    steps:
      # -------------------------------------------------------------
      # Checkout sources
      # -------------------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4

      # -------------------------------------------------------------
      # Node.js toolchain + dependency cache
      # -------------------------------------------------------------
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: client/package-lock.json

      - name: Install dependencies
        run: npm ci

      # -------------------------------------------------------------
      # i18n audit BEFORE build to keep bundles clean
      # If this is too strict for now, use the soft-fail variant below.
      # -------------------------------------------------------------
      - name: i18n audit
        run: npm run i18n:audit
        # Soft-fail alternative (uncomment to warn instead of fail):
        # run: npm run i18n:audit || echo "::warning::i18n audit failed but continuing"

      # -------------------------------------------------------------
      # Build production client bundle
      # IMPORTANT: pass Environment-scoped secrets to Vite build and sitemap generator.
      # -------------------------------------------------------------
      - name: Build
        env:
          CLIENT_URL: ${{ secrets.CLIENT_URL }}
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
        run: npm run build

      # -------------------------------------------------------------
      # AWS credentials configuration
      # We KEEP your current static-keys method (from GitHub Secrets).
      # When you migrate to OIDC, use the commented block below instead.
      # -------------------------------------------------------------
      - name: Configure AWS credentials (static keys)
        if: github.ref_name == 'develop' || github.ref_name == 'main'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      # --- OIDC (future, recommended) --------------------------------
      # - name: Configure AWS credentials (OIDC)
      #   if: github.ref_name == 'develop' || github.ref_name == 'main'
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: ${{ vars.AWS_ROLE_TO_ASSUME }}    # ex: arn:aws:iam::<account>:role/<role-name>
      #     aws-region:     ${{ env.AWS_REGION }}
      #     audience:       sts.amazonaws.com
      # ---------------------------------------------------------------

      # -------------------------------------------------------------
      # Resolve target S3 bucket by branch.
      # Prefer repository variables; fall back to old per-env secrets.
      # -------------------------------------------------------------
      - name: Resolve S3 bucket (staging/prod)
        id: bucket
        shell: bash
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            # Prod branch
            if [[ -n "${{ vars.S3_BUCKET_PROD }}" ]]; then
              echo "value=${{ vars.S3_BUCKET_PROD }}" >> "$GITHUB_OUTPUT"
            else
              echo "value=${{ secrets.S3_BUCKET_PROD }}" >> "$GITHUB_OUTPUT"
            fi
          else
            # Staging branch (develop)
            if [[ -n "${{ vars.S3_BUCKET_STAGING }}" ]]; then
              echo "value=${{ vars.S3_BUCKET_STAGING }}" >> "$GITHUB_OUTPUT"
            else
              echo "value=${{ secrets.S3_BUCKET_STAGING }}" >> "$GITHUB_OUTPUT"
            fi
          fi
          echo "Selected bucket: $(cat $GITHUB_OUTPUT | cut -d= -f2- | tail -n1)"

      # -------------------------------------------------------------
      # Upload built assets to S3 (sync keeps bucket tidy)
      # -------------------------------------------------------------
      - name: Upload to S3
        shell: bash
        run: |
          BUCKET="${{ steps.bucket.outputs.value }}"
          if [[ -z "$BUCKET" ]]; then
            echo "::error::S3 bucket not resolved (check repository Variables/Secrets)."
            exit 1
          fi
          echo "Syncing client/dist to s3://${BUCKET}"
          aws s3 sync dist "s3://${BUCKET}" --delete

      # -------------------------------------------------------------
      # Resolve CloudFront distribution ID by branch (vars first, then secrets)
      # -------------------------------------------------------------
      - name: Resolve CloudFront distribution
        id: cf
        shell: bash
        run: |
          if [[ "${GITHUB_REF_NAME}" == "main" ]]; then
            if [[ -n "${{ vars.CF_DISTRIBUTION_ID_PROD }}" ]]; then
              echo "id=${{ vars.CF_DISTRIBUTION_ID_PROD }}" >> "$GITHUB_OUTPUT"
            else
              echo "id=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_PROD }}" >> "$GITHUB_OUTPUT"
            fi
          else
            if [[ -n "${{ vars.CF_DISTRIBUTION_ID_STAGING }}" ]]; then
              echo "id=${{ vars.CF_DISTRIBUTION_ID_STAGING }}" >> "$GITHUB_OUTPUT"
            else
              echo "id=${{ secrets.CLOUDFRONT_DISTRIBUTION_ID_STAGING }}" >> "$GITHUB_OUTPUT"
            fi
          fi
          echo "Selected distribution: $(cat $GITHUB_OUTPUT | cut -d= -f2- | tail -n1)"

      # -------------------------------------------------------------
      # Invalidate CloudFront cache to roll out the fresh build
      # -------------------------------------------------------------
      - name: Invalidate CloudFront
        shell: bash
        run: |
          DIST_ID="${{ steps.cf.outputs.id }}"
          if [[ -z "$DIST_ID" ]]; then
            echo "::error::CloudFront Distribution ID not resolved (check repository Variables/Secrets)."
            exit 1
          fi
          echo "Creating CloudFront invalidation for distribution ${DIST_ID}"
          aws cloudfront create-invalidation --distribution-id "${DIST_ID}" --paths "/*"

      # -------------------------------------------------------------
      # (Optional) Post-deploy sanity print
      # -------------------------------------------------------------
      - name: Deployment summary
        shell: bash
        run: |
          echo "Branch: ${GITHUB_REF_NAME}"
          echo "Region: ${AWS_REGION}"
          echo "S3 bucket: ${{ steps.bucket.outputs.value }}"
          echo "CloudFront: ${{ steps.cf.outputs.id }}"
# --- REPLACE END ---



















