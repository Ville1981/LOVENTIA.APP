{
  "info": {
    "name": "Loventia Auth",
    "_postman_id": "f0f0cafe-0002-4d4b-8col-000000000002",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Register",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "url": { "raw": "{{baseUrl}}/auth/register", "host": ["{{baseUrl}}"], "path": ["auth","register"] },
        "body": {
          "mode": "raw",
          "raw": "{\"email\":\"{{email}}\",\"password\":\"{{password}}\"}"
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Register ok or already exists', function () {",
              "  pm.expect([200,201,400,409]).to.include(pm.response.code);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Login",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "url": { "raw": "{{baseUrl}}/auth/login", "host": ["{{baseUrl}}"], "path": ["auth","login"] },
        "body": { "mode": "raw", "raw": "{\"email\":\"{{email}}\",\"password\":\"{{password}}\"}" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Login 200', function () { pm.response.to.have.status(200); });",
              "try {",
              "  var json = pm.response.json();",
              "  var token = json.accessToken || json.token;",
              "  pm.expect(token, 'access token').to.be.a('string').and.not.empty;",
              "  pm.environment.set('accessToken', token);",
              "} catch (e) {",
              "  pm.test('Parse token', function () { throw e; });",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Me (with access token)",
      "request": {
        "method": "GET",
        "header": [ { "key": "Authorization", "value": "Bearer {{accessToken}}" } ],
        "url": { "raw": "{{baseUrl}}/auth/me", "host": ["{{baseUrl}}"], "path": ["auth","me"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Me 200', function () { pm.response.to.have.status(200); });",
              "var user = pm.response.json().user;",
              "pm.test('User present', function(){ pm.expect(user && user.email).to.be.a('string'); });"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Refresh (cookie-based)",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "url": { "raw": "{{baseUrl}}/auth/refresh", "host": ["{{baseUrl}}"], "path": ["auth","refresh"] },
        "body": { "mode": "raw", "raw": "{}" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Refresh 200', function () { pm.response.to.have.status(200); });",
              "var json = pm.response.json();",
              "var token = json.accessToken || json.token;",
              "pm.test('New token present', function(){ pm.expect(token).to.be.a('string').and.not.empty; });",
              "pm.environment.set('accessToken', token);"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Logout",
      "request": {
        "method": "POST",
        "header": [ { "key": "Content-Type", "value": "application/json" } ],
        "url": { "raw": "{{baseUrl}}/auth/logout", "host": ["{{baseUrl}}"], "path": ["auth","logout"] },
        "body": { "mode": "raw", "raw": "{}" }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Logout 200', function () { pm.response.to.have.status(200); });"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Me after logout (should fail)",
      "request": {
        "method": "GET",
        "header": [ { "key": "Authorization", "value": "Bearer {{accessToken}}" } ],
        "url": { "raw": "{{baseUrl}}/auth/me", "host": ["{{baseUrl}}"], "path": ["auth","me"] }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Me should be 401/403', function () {",
              "  pm.expect([401,403]).to.include(pm.response.code);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}
